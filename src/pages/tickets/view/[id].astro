---
import MainLayout from "@/layouts/MainLayout.astro";
import { getSession } from "auth-astro/server";
import { prisma } from "@/lib/db";
import { type Ticket, type Estatus, type Usuario, Prioridad, type HistorialSolicitud, type Subcategoria } from "@prisma/client";

const { id } = Astro.params;
if (!id) {
    return Astro.redirect("/404");
}

const ticketId = parseInt(id, 10);

const S3_BUCKET_URL = `https://${import.meta.env.S3_BUCKET_NAME}.s3.${import.meta.env.S3_REGION}.amazonaws.com`;

const ALLOWED_STATUSES = ['Nuevo', 'En progreso', 'En espera', 'Solucionado', 'Cancelado', 'Duplicado'];
const statusColors: { [key: string]: string } = {
    'Nuevo': '#a1a1aa',
    'En progreso': '#3b82f6',
    'En espera': '#38bdf8',
    'Solucionado': '#84cc16',
    'Cancelado': '#dc2626',
    'Duplicado': '#171717',
};

const [ticket, ticketHistory] = await Promise.all([
    prisma.ticket.findUnique({
        where: { id: ticketId },
        include: {
            estatus: true,
            categoria: true,
            subcategoria: true,
            solicitante: { include: { empresa: true } },
            atiende: true,
            empresa: true,
        },
    }),
    prisma.historialSolicitud.findMany({
        where: { ticketId: ticketId },
        include: {
            usuario: { select: { nombres: true, apellidos: true } },
            estatus: { select: { nombre: true } },
        },
        orderBy: { fecha_cambio: 'desc' },
    })
]);

if (!ticket) {
    return Astro.redirect("/404");
}

const session = await getSession(Astro.request);
const PRIVILEGED_ROLES = [1, 2, 3, 4, 5, 6, 15];
const isPrivileged = session?.user ? PRIVILEGED_ROLES.includes(session.user.rol?.id ?? -1) : false;
const isReadOnly = false; // Reverted: Allow editing for all statuses

const breadcrumbPath = [ticket.categoria.nombre];
if (ticket.subcategoria) {
    let currentSub: Subcategoria | null = ticket.subcategoria;
    const subPath = [];
    while (currentSub) {
        subPath.unshift(currentSub.nombre);
        if (currentSub.parent_subcategoriaId) {
            currentSub = await prisma.subcategoria.findUnique({ where: { id: currentSub.parent_subcategoriaId } });
        } else {
            currentSub = null;
        }
    }
    breadcrumbPath.push(...subPath);
}

let statuses: Estatus[] = [];
let agents: Usuario[] = [];
const priorities = Object.values(Prioridad);

if (isPrivileged) {
    [statuses, agents] = await Promise.all([
        prisma.estatus.findMany({ where: { nombre: { in: ALLOWED_STATUSES } } }),
        prisma.usuario.findMany({ where: { rolId: { in: PRIVILEGED_ROLES }, activo: true } }),
    ]);
}

const parseFileName = (key: string) => {
    if (!key) return 'archivo-desconocido';
    return key.split('/').pop()?.split('-').slice(1).join('-') || key;
};
---

<MainLayout title={`Ticket #${ticket.id}`}>
    <style>
        @keyframes flash {
            0% { background-color: transparent; }
            50% { background-color: #f0f0f0; }
            100% { background-color: transparent; }
        }
        .flash-animation {
            animation: flash 1s ease-in-out;
        }
        @media (max-width: 1119px) {
            #action-buttons-container.has-files {
                flex-direction: column;
                align-items: end;
                width: calc(2/5 * 100%);
            }
            #action-buttons-container.has-files #submit-button { order: 1; }
            #action-buttons-container.has-files #upload-files-button { order: 2; }
            #action-buttons-container.has-files #delete-files-button { order: 3; }
            #action-buttons-container.has-files #help-text { order: 4; text-align: right; }
        }
    </style>
    <div class="max-w-4xl mx-auto">
        <div class="mb-4 text-sm text-muted-foreground">
            {breadcrumbPath.join(' > ')}
        </div>

        <form id="edit-ticket-form">
            <div class="bg-card border border-[var(--secondary)] rounded-lg p-4 mb-6">
                <div class="flex justify-between items-center mb-4">
                    <p class="text-lg font-semibold">{ticket.solicitante.nombres} {ticket.solicitante.apellidos}</p>
                    <a href="/tickets/soporte" class="bg-muted-foreground text-white hover:bg-muted-foreground/80 px-6 py-2 rounded-md text-sm font-semibold">Volver a la lista</a>
                </div>
                <div class="space-y-4">
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div>
                            <label class="block text-xs font-medium text-muted-foreground">Empresa</label>
                            <p class="mt-1">{ticket.empresa.nombre}</p>
                        </div>
                        <div>
                            <label for="prioridad" class="block text-xs font-medium text-muted-foreground">Prioridad</label>
                            <select id="prioridad" name="prioridad" class="mt-1 block w-full rounded-md border-border bg-gray-200 p-2 text-sm">
                                {priorities.map(p => {
                                    return (
                                        <option value={p} selected={p === ticket.prioridad}>{p}</option>
                                    );
                                })}
                            </select>
                        </div>
                        <div>
                            <label for="estatusId" class="block text-xs font-medium text-muted-foreground">Estatus</label>
                            <select id="estatusId" name="estatusId" class="mt-1 block w-full rounded-md border-border p-2 text-sm">
                                {statuses.map(status => {
                                    return (
                                        <option 
                                            value={status.id} 
                                            selected={status.id === ticket.estatusId}
                                            style={`background-color: ${statusColors[status.nombre] || '#a1a1aa'}; color: white;`}
                                        >
                                            {status.nombre}
                                        </option>
                                    );
                                })}
                            </select>
                        </div>
                    </div>
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div>
                            <label for="atiendeId" class="block text-xs font-medium text-muted-foreground">Atiende</label>
                            <select id="atiendeId" name="atiendeId" class="mt-1 block w-full rounded-md border-border bg-gray-200 p-2 text-sm">
                                {agents.map(agent => {
                                    return (
                                        <option value={agent.id} selected={agent.id === ticket.atiendeId}>{`${agent.nombres} ${agent.apellidos}`}</option>
                                    );
                                })}
                            </select>
                        </div>
                        <div class="pt-4">
                            <div class="flex items-center gap-2">
                                <input type="checkbox" id="archivado" name="archivado" class="h-4 w-4 rounded" checked={ticket.archivado} />
                                <label for="archivado" class="text-sm font-medium">Archivado</label>
                            </div>
                        </div>
                    </div>
                    <div>
                        <label class="block text-xs font-medium text-muted-foreground">Descripción</label>
                        <p class="mt-1 whitespace-pre-wrap p-2 border rounded-md bg-input/50">{ticket.descripcion}</p>
                    </div>
                </div>
            </div>
            
            <div class="flex justify-between items-start gap-4 mb-4 w-full">
                <div id="attachment-area" class="space-y-2 flex-grow"></div>
                <div id="action-buttons-container" class="flex flex-wrap justify-between items-center gap-4 flex-shrink-0 w-3/5">
                    <button type="button" id="upload-files-button" class="bg-muted-foreground text-white hover:bg-muted-foreground/80 px-8 py-2 rounded-md text-sm font-semibold w-[176px]">
                        Adjuntar archivos
                    </button>
                    <button type="submit" id="submit-button" class="bg-primary text-white hover:bg-primary/80 px-8 py-2 rounded-md text-sm font-semibold w-[176px]">
                        Guardar cambios
                    </button>
                    <button type="button" id="delete-files-button" class="hidden bg-secondary text-white hover:bg-secondary/80 px-8 py-2 rounded-md text-sm font-semibold w-[176px]">
                        Borrar archivos
                    </button>
                </div>
            </div>
            <p id="help-text" class="text-sm text-secondary w-full text-right mb-8">
                * Máximo 5MB cada uno. Formatos permitidos: jpg, png, pdf, docx, xlsx
            </p>
        </form>
        <input type="file" id="file-input" multiple class="hidden" />

        <div class="bg-card border border-[var(--secondary)] rounded-lg p-8">
            <div class="mb-6">
                <label for="new-comment" class="block text-sm font-medium text-muted-foreground mb-2">Añadir comentario</label>
                <textarea id="new-comment" name="new-comment" rows="3" class="w-full rounded-md border-border bg-input p-2 text-sm" placeholder="Escribe un comentario..."></textarea>
            </div>
            <ul class="space-y-6">
                {ticketHistory.length > 0 ? ticketHistory.map((entry, index) => {
                    const hasFiles = entry.archivos && (entry.archivos as any).newFiles && (entry.archivos as any).newFiles.length > 0;
                    const fieldChanges = (entry.cambios as any)?.fieldChanges?.filter((c: any) => ['prioridad', 'atiendeId'].includes(c.field)) || [];
                    return (
                    <li class="flex gap-4 border-t border-border pt-4 first:pt-0 first:border-t-0" data-history-entry={index === 0 ? 'true' : 'false'}>
                        <div class="flex-grow">
                            <div class="flex justify-between items-center">
                                <p class="font-semibold text-sm">{entry.usuario.nombres} {entry.usuario.apellidos}</p>
                                <p class="text-sm text-muted-foreground">
                                    {new Date(entry.fecha_cambio).toLocaleString('es-MX', { dateStyle: 'full', timeStyle: 'short' })}
                                </p>
                            </div>
                            <div class="flex items-center gap-4 mt-1">
                                {entry.estatus && (
                                    <span style={`background-color: ${statusColors[entry.estatus.nombre] || '#a1a1aa'};`} class="px-2 py-1 text-xs font-bold text-white rounded-full">
                                        {entry.estatus.nombre}
                                    </span>
                                )}
                                {hasFiles && (
                                    <div class="relative">
                                        <button type="button" class="attachment-clip" aria-expanded="false">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m21.44 11.05-9.19 9.19a6 6 0 0 1-8.49-8.49l8.57-8.57A4 4 0 1 1 18 8.84l-8.59 8.59a2 2 0 0 1-2.83-2.83l8.49-8.48"/></svg>
                                        </button>
                                        <div class="attachment-dropdown hidden absolute z-10 bg-card border rounded-md shadow-lg mt-1 py-1">
                                            {(entry.archivos as any).newFiles.map((key: string) => (
                                                <a href="#" data-key={key} class="attachment-link block px-4 py-2 text-sm text-card-foreground hover:bg-accent">{parseFileName(key)}</a>
                                            ))}
                                        </div>
                                    </div>
                                )}
                            </div>
                            {entry.comentario && <p class="mt-2 text-sm p-3 bg-muted/50 rounded-md">{entry.comentario}</p>}
                            {fieldChanges.length > 0 && (
                                <div class="mt-2 text-xs p-2 bg-blue-50 border border-blue-200 rounded-md">
                                    <p class="font-semibold mb-1">Cambios de campos:</p>
                                    {fieldChanges.map((change: any) => (
                                        <p>{`• `}<span class="font-semibold capitalize">{change.field.replace(/Id$/, '')}:</span>{` '${String(change.oldValue)}' → '${String(change.newValue)}'`}</p>
                                    ))}
                                </div>
                            )}
                        </div>
                    </li>
                )})
                : <p class="text-center text-muted-foreground">No hay historial de cambios para este ticket.</p>}
            </ul>
        </div>
    </div>
</MainLayout>

<script define:vars={{ ticketId, ticket, statuses }}>
    window.ticketViewData = { ticketId, ticket, statuses };
</script>
<script>
    import {
        init,
        initEditForm,
        initFileUploads,
        initHistoryToggles,
        initStatusColorizer,
        handleNewHistoryEntry
    } from '@/scripts/ticket-view-logic.ts';

    document.addEventListener('astro:page-load', () => {
        init();
        initEditForm();
        initFileUploads();
        initHistoryToggles();
        initStatusColorizer();
        handleNewHistoryEntry();
    });
</script>