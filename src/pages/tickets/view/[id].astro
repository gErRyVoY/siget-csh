---
import MainLayout from "@/layouts/MainLayout.astro";
import { getSession } from "auth-astro/server";
import { prisma } from "@/lib/db";
import { type Ticket, type Estatus, type Usuario, Prioridad, type HistorialSolicitud, type Subcategoria } from "@prisma/client";

const { id } = Astro.params;
if (!id) {
    return Astro.redirect("/404");
}

const ticketId = parseInt(id, 10);

const S3_BUCKET_URL = `https://${import.meta.env.S3_BUCKET_NAME}.s3.${import.meta.env.S3_REGION}.amazonaws.com`;

const ALLOWED_STATUSES = ['Nuevo', 'En espera', 'Solucionado', 'Cancelado', 'Duplicado'];
const statusColors = {
    'Nuevo': '#a1a1aa',
    'En espera': '#38bdf8',
    'Solucionado': '#84cc16',
    'Cancelado': '#dc2626',
    'Duplicado': '#171717',
};

const [ticket, ticketHistory] = await Promise.all([
    prisma.ticket.findUnique({
        where: { id: ticketId },
        include: {
            estatus: true,
            categoria: true,
            subcategoria: true,
            solicitante: { include: { empresa: true } },
            atiende: true,
            empresa: true,
        },
    }),
    prisma.historialSolicitud.findMany({
        where: { ticketId: ticketId },
        include: {
            usuario: { select: { nombres: true, apellidos: true } },
            estatus: { select: { nombre: true } },
        },
        orderBy: { fecha_cambio: 'desc' },
    })
]);

if (!ticket) {
    return Astro.redirect("/404");
}

const session = await getSession(Astro.request);
const PRIVILEGED_ROLES = [1, 2, 3, 4, 5, 6, 15];
const isPrivileged = session?.user ? PRIVILEGED_ROLES.includes(session.user.rol?.id ?? -1) : false;

const breadcrumbPath = [ticket.categoria.nombre];
if (ticket.subcategoria) {
    let currentSub: Subcategoria | null = ticket.subcategoria;
    const subPath = [];
    while (currentSub) {
        subPath.unshift(currentSub.nombre);
        if (currentSub.parent_subcategoriaId) {
            currentSub = await prisma.subcategoria.findUnique({ where: { id: currentSub.parent_subcategoriaId } });
        } else {
            currentSub = null;
        }
    }
    breadcrumbPath.push(...subPath);
}

let statuses: Estatus[] = [];
let agents: Usuario[] = [];
let companyUsers: Usuario[] = [];
const priorities = Object.values(Prioridad);

if (isPrivileged) {
    [statuses, agents, companyUsers] = await Promise.all([
        prisma.estatus.findMany({ where: { nombre: { in: ALLOWED_STATUSES } } }),
        prisma.usuario.findMany({ where: { rolId: { in: PRIVILEGED_ROLES }, activo: true } }),
        prisma.usuario.findMany({ where: { empresaId: ticket.solicitante.empresaId, activo: true } })
    ]);
}

const parseFileName = (key: string) => {
    if (!key) return 'archivo-desconocido';
    return key.split('/').pop()?.split('-').slice(1).join('-') || key;
};
---

<MainLayout title={`Ticket #${ticket.id}`}>
    <div class="max-w-4xl mx-auto">
        <div class="mb-4 text-sm text-muted-foreground">
            {breadcrumbPath.join(' > ')}
        </div>

        <form id="edit-ticket-form">
            <div class="bg-card border border-[var(--secondary)] rounded-lg p-4 mb-6">
                <div class="flex justify-between items-center mb-4">
                    <p class="text-lg font-semibold">{ticket.solicitante.nombres} {ticket.solicitante.apellidos}</p>
                    <a href="/" class="bg-gray-200 text-gray-800 hover:bg-gray-300 px-6 py-2 rounded-md text-sm font-semibold">Volver a la lista</a>
                </div>
                <div class="space-y-4">
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div>
                            <label class="block text-xs font-medium text-muted-foreground">Empresa</label>
                            <p class="mt-1">{ticket.empresa.nombre}</p>
                        </div>
                        <div>
                            <label for="prioridad" class="block text-xs font-medium text-muted-foreground">Prioridad</label>
                            {isPrivileged ? (
                                <select id="prioridad" name="prioridad" class="mt-1 block w-full rounded-md border-border bg-gray-200 p-2 text-sm">
                                    {priorities.map(p => <option value={p} selected={p === ticket.prioridad}>{p}</option>)}
                                </select>
                            ) : (
                                <p class="mt-1">{ticket.prioridad}</p>
                            )}
                        </div>
                        <div>
                            <label for="estatusId" class="block text-xs font-medium text-muted-foreground">Estatus</label>
                            {isPrivileged ? (
                                <select id="estatusId" name="estatusId" class="mt-1 block w-full rounded-md border-border bg-gray-200 p-2 text-sm">
                                    {statuses.map(status => 
                                        <option value={status.id} data-color={statusColors[status.nombre as keyof typeof statusColors]} selected={status.id === ticket.estatusId}>
                                            {status.nombre}
                                        </option>)
                                    }
                                </select>
                            ) : (
                                <p class="mt-1">{ticket.estatus.nombre}</p>
                            )}
                        </div>
                    </div>
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div>
                            <label for="atiendeId" class="block text-xs font-medium text-muted-foreground">Atiende</label>
                            {isPrivileged ? (
                                <select id="atiendeId" name="atiendeId" class="mt-1 block w-full rounded-md border-border bg-gray-200 p-2 text-sm">
                                    {agents.map(agent => <option value={agent.id} selected={agent.id === ticket.atiendeId}>{`${agent.nombres} ${agent.apellidos}`}</option>)}
                                </select>
                            ) : (
                                <p class="mt-1">{ticket.atiende.nombres} {ticket.atiende.apellidos}</p>
                            )}
                        </div>
                        <div class="pt-4">
                            {isPrivileged && (
                                <div class="flex items-center gap-2">
                                    <input type="checkbox" id="archivado" name="archivado" class="h-4 w-4 rounded" checked={ticket.archivado} />
                                    <label for="archivado" class="text-sm font-medium">Archivado</label>
                                </div>
                            )}
                        </div>
                    </div>
                    <div>
                        <label class="block text-xs font-medium text-muted-foreground">Descripción</label>
                        <p class="mt-1 whitespace-pre-wrap p-2 border rounded-md bg-input/50">{ticket.descripcion}</p>
                    </div>
                </div>
            </div>
            
            {isPrivileged && (
                <div class="flex justify-between items-start gap-4 mb-8">
                    <div id="attachment-area" class="space-y-2 flex-grow"></div>
                    <div class="flex items-center gap-4 flex-shrink-0">
                        <button type="button" id="upload-files-button" class="bg-gray-200 text-gray-800 hover:bg-gray-300 px-8 py-2 rounded-md text-sm font-semibold">
                            Adjuntar archivos
                        </button>
                        <button type="submit" class="bg-primary text-primary-foreground hover:bg-primary/90 px-8 py-2 rounded-md text-sm font-semibold">
                            Guardar cambios
                        </button>
                    </div>
                </div>
            )}
        </form>
        <input type="file" id="file-input" multiple class="hidden" />

        <div class="bg-card border border-[var(--secondary)] rounded-lg p-8">
            <div class="mb-6">
                <label for="new-comment" class="block text-sm font-medium text-muted-foreground mb-2">Añadir comentario</label>
                <textarea id="new-comment" name="new-comment" rows="3" class="w-full rounded-md border-border bg-input p-2 text-sm" placeholder="Escribe un comentario..."></textarea>
            </div>
            <ul class="space-y-6">
                {ticketHistory.length > 0 ? ticketHistory.map((entry) => {
                    const hasFiles = entry.archivos && (entry.archivos as any).newFiles && (entry.archivos as any).newFiles.length > 0;
                    const fieldChanges = (entry.cambios as any)?.fieldChanges?.filter((c: any) => ['prioridad', 'atiendeId'].includes(c.field)) || [];
                    return (
                    <li class="flex gap-4 border-t border-border pt-4 first:pt-0 first:border-t-0">
                        <div class="flex-grow">
                            <div class="flex justify-between items-center mb-2">
                                <div>
                                    <p class="font-semibold text-sm">{entry.usuario.nombres} {entry.usuario.apellidos}</p>
                                    {entry.estatus && (
                                        <span style={`background-color: ${statusColors[entry.estatus.nombre as keyof typeof statusColors] || '#a1a1aa'};`} class="px-2 py-1 text-xs font-bold text-white rounded-full mr-2">
                                            {entry.estatus.nombre}
                                        </span>
                                    )}
                                </div>
                                <p class="text-sm text-muted-foreground">
                                    {new Date(entry.fecha_cambio).toLocaleString('es-MX', { dateStyle: 'full', timeStyle: 'short' })}
                                </p>
                            </div>
                            {entry.comentario && <p class="mt-2 text-sm p-3 bg-muted/50 rounded-md">{entry.comentario}</p>}
                            {fieldChanges.length > 0 && (
                                <div class="mt-2 text-xs p-2 bg-blue-50 border border-blue-200 rounded-md">
                                    <p class="font-semibold mb-1">Cambios de campos:</p>
                                    {fieldChanges.map((change: any) => (
                                        <p>• <span class="font-semibold capitalize">{change.field.replace(/Id$/, '')}:</span> '{String(change.oldValue)}' → '{String(change.newValue)}'</p>
                                    ))}
                                </div>
                            )}
                            {hasFiles && (
                                <div class="mt-2 relative">
                                    <button type="button" class="attachment-clip" aria-expanded="false">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m21.44 11.05-9.19 9.19a6 6 0 0 1-8.49-8.49l8.57-8.57A4 4 0 1 1 18 8.84l-8.59 8.59a2 2 0 0 1-2.83-2.83l8.49-8.48"/></svg>
                                    </button>
                                    <div class="attachment-dropdown hidden absolute z-10 bg-card border rounded-md shadow-lg mt-1 py-1">
                                        {(entry.archivos as any).newFiles.map((key: string) => (
                                            <a href="#" data-key={key} class="attachment-link block px-4 py-2 text-sm text-card-foreground hover:bg-accent">{parseFileName(key)}</a>
                                        ))}
                                    </div>
                                </div>
                            )}
                        </div>
                    </li>
                )})
                : <p class="text-center text-muted-foreground">No hay historial de cambios para este ticket.</p>}
            </ul>
        </div>
    </div>
</MainLayout>

<script define:vars={{ ticketId, statusColors }}>
    let stagedFiles = [];

    const Toast = Swal.mixin({
        toast: true,
        position: 'bottom',
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
        background: '#881912',
        color: '#FFFFFF',
        iconColor: '#caab55',
        didOpen: (toast) => {
            toast.addEventListener('mouseenter', Swal.stopTimer)
            toast.addEventListener('mouseleave', Swal.resumeTimer)
        }
    });

    function setElementColor(selectElement) {
        const selectedOption = selectElement.options[selectElement.selectedIndex];
        if (!selectedOption) return;
        const color = selectedOption.dataset.color;
        selectElement.style.backgroundColor = color || '#f3f4f6';
        selectElement.style.color = color ? 'white' : 'black';
    }

    function initStatusColorizer() {
        const statusSelect = document.getElementById('estatusId');
        if (statusSelect) {
            statusSelect.addEventListener('change', () => setElementColor(statusSelect));
            setElementColor(statusSelect);
        }

        // Apply initial colors to all selects with data-color attribute
        document.querySelectorAll('select').forEach(select => {
            if (select.id !== 'estatusId') { // Don't re-apply to status, it's handled
                const selectedOption = select.options[select.selectedIndex];
                if (selectedOption && selectedOption.dataset.color) {
                     setElementColor(select);
                }
            }
        });
    }

    function initFileUploads() {
        const uploadButton = document.getElementById('upload-files-button');
        const fileInput = document.getElementById('file-input');
        const attachmentArea = document.getElementById('attachment-area');

        if (!uploadButton || !fileInput || !attachmentArea) return;

        uploadButton.addEventListener('click', () => fileInput.click());

        fileInput.addEventListener('change', (e) => {
            const target = e.target;
            if (!target || !target.files) return;
            const files = target.files;
            
            stagedFiles = Array.from(files);

            const stagedFilesHtml = '<h3 class="text-sm font-medium mb-2">Archivos listos para subir:</h3>' +
                '<ul class="list-disc pl-5 text-sm text-muted-foreground">' +
                stagedFiles.map(file => `<li>${file.name}</li>`).join('') +
                '</ul>';
            attachmentArea.innerHTML = stagedFilesHtml;
        });
    }

    function initEditForm() {
        const form = document.getElementById('edit-ticket-form');
        if (!form) return;

        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            const submitButton = form.querySelector('button[type="submit"]');
            submitButton.disabled = true;
            submitButton.textContent = 'Guardando...';

            let uploadedFileKeys = [];

            if (stagedFiles.length > 0) {
                const attachmentArea = document.getElementById('attachment-area');
                attachmentArea.innerHTML = '<h3 class="text-sm font-medium mb-2">Subiendo archivos...</h3>';
                
                const uploadPromises = stagedFiles.map(async file => {
                    try {
                        const presignedResponse = await fetch('/api/tickets/generate-upload-url', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ fileName: file.name, fileType: file.type, ticketId: ticketId })
                        });
                        if (!presignedResponse.ok) throw new Error('Error al obtener URL segura.');
                        const { uploadUrl, key } = await presignedResponse.json();

                        await fetch(uploadUrl, { method: 'PUT', body: file, headers: { 'Content-Type': file.type } });
                        return key;
                    } catch (error) {
                        console.error(`Upload failed for ${file.name}:`, error);
                        return null;
                    }
                });

                const results = await Promise.all(uploadPromises);
                uploadedFileKeys = results.filter(key => key !== null);

                if (uploadedFileKeys.length !== stagedFiles.length) {
                    Swal.fire('Error', 'Algunos archivos no se pudieron subir. Por favor, inténtalo de nuevo.', 'error');
                    submitButton.disabled = false;
                    submitButton.textContent = 'Guardar cambios';
                    return;
                }
            }

            const formData = new FormData(form);
            const newCommentElement = document.getElementById('new-comment');
            const data = {
                ticketId: ticketId,
                estatusId: formData.get('estatusId'),
                prioridad: formData.get('prioridad'),
                atiendeId: formData.get('atiendeId'),
                solicitanteId: formData.get('solicitanteId'),
                archivado: form.elements.archivado.checked,
                newComment: newCommentElement.value,
                newFiles: uploadedFileKeys,
            };

            try {
                const response = await fetch(`/api/tickets/update`, {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(data),
                });
                if (!response.ok) throw new Error('Error al actualizar el ticket');

                Toast.fire({ icon: 'success', title: 'Ticket actualizado correctamente' }).then(() => {
                    window.location.reload();
                });
            } catch (error) {
                Swal.fire({ title: 'Error', text: error.message, icon: 'error' });
                submitButton.disabled = false;
                submitButton.textContent = 'Guardar cambios';
            }
        });
    }

    function initHistoryToggles() {
        let activeDropdown = null;

        const closeActiveDropdown = () => {
            if (activeDropdown) {
                activeDropdown.classList.add('hidden');
                activeDropdown = null;
            }
        };

        document.querySelectorAll('.attachment-clip').forEach(button => {
            button.addEventListener('click', (e) => {
                e.stopPropagation();
                const dropdown = e.currentTarget.nextElementSibling;
                if (dropdown) {
                    if (dropdown === activeDropdown) {
                        closeActiveDropdown();
                    } else {
                        closeActiveDropdown();
                        dropdown.classList.remove('hidden');
                        activeDropdown = dropdown;
                    }
                }
            });
        });

        document.querySelectorAll('.attachment-link').forEach(link => {
            link.addEventListener('click', async (e) => {
                e.preventDefault();
                const key = e.currentTarget.dataset.key;
                if (!key) return;

                try {
                    const response = await fetch('/api/tickets/get-download-url', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ key })
                    });
                    if (!response.ok) throw new Error('No se pudo obtener el enlace de descarga.');
                    const { downloadUrl } = await response.json();
                    window.open(downloadUrl, '_blank');
                    closeActiveDropdown();
                } catch (error) {
                    console.error('Error fetching download URL:', error);
                    Swal.fire('Error', error.message, 'error');
                }
            });
        });

        document.addEventListener('click', closeActiveDropdown);
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                closeActiveDropdown();
            }
        });
    }

    document.addEventListener('astro:page-load', () => {
        initEditForm();
        initFileUploads();
        initHistoryToggles();
        initStatusColorizer();
    });
</script>
