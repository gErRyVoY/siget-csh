---
import MainLayout from "@/layouts/MainLayout.astro";
import { getSession } from "auth-astro/server";
import { prisma } from "@/lib/db";
import StatCard from "@/components/dashboard/StatCard.astro";

const session = await getSession(Astro.request);
if (!session || !session.user) {
    return Astro.redirect("/login");
}

const statusColors = {
    'Total de Tickets': '#6b7280', // gray-500
    'Tickets Nuevos': '#a1a1aa', // zinc-400
    'Tickets En progreso': '#3b82f6', // blue-500
    'Tickets En espera': '#38bdf8', // sky-400
    'Traslados': '#f59e0b', // amber-500
    'Tickets Solucionados': '#84cc16', // lime-500
    'Tickets Duplicados': '#171717', // neutral-900
    'Tickets Cancelados': '#dc2626', // red-600
};

const [ticketCounts, activeCycle] = await Promise.all([
    prisma.ticket.groupBy({
        by: ['estatusId'],
        _count: { id: true },
    }),
    prisma.ciclo.findFirst({ where: { activo: true } })
]);

const statuses = await prisma.estatus.findMany();

const getCount = (name: string) => {
    const status = statuses.find(s => s.nombre === name);
    if (!status) return 0;
    return ticketCounts.find(c => c.estatusId === status.id)?._count.id || 0;
}

const trasladosCount = activeCycle ? await prisma.ticket.count({
    where: {
        subcategoriaId: 58,
        fechaalta: {
            gte: activeCycle.fecha_inicio,
            lte: activeCycle.fecha_fin,
        }
    }
}) : 0;

const stats = {
    nuevos: getCount('Nuevo'),
    enProgreso: getCount('En progreso'),
    enEspera: getCount('En espera'),
    traslados: trasladosCount,
    total: ticketCounts.reduce((acc, curr) => acc + curr._count.id, 0),
    solucionados: getCount('Solucionado'),
    duplicados: getCount('Duplicado'),
    cancelados: getCount('Cancelado'),
};

---

<MainLayout title="Dashboard">
    <div class="max-w-full mx-auto">
        <div id="main-stats" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <StatCard title="Tickets Nuevos" value={stats.nuevos.toString()} description="Tickets sin atender" color={statusColors['Tickets Nuevos']} />
            <StatCard title="Tickets En progreso" value={stats.enProgreso.toString()} description="Siendo atendidos activamente" color={statusColors['Tickets En progreso']} />
            <StatCard title="Tickets En espera" value={stats.enEspera.toString()} description="En espera de una respuesta" color={statusColors['Tickets En espera']} />
            <StatCard title="Traslados" value={stats.traslados.toString()} description="Traslados solicitados en el ciclo" color={statusColors['Traslados']} />
        </div>

        <div class="mt-6 text-center">
            <button id="toggle-stats-btn" class="text-sm font-semibold text-primary hover:underline">Ver todo</button>
        </div>

        <div id="secondary-stats" class="grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mt-6 hidden">
            <StatCard title="Total de Tickets" value={stats.total.toString()} description="Todos los tickets registrados" color={statusColors['Total de Tickets']} />
            <StatCard title="Tickets Solucionados" value={stats.solucionados.toString()} description="Marcados como solucionados" color={statusColors['Tickets Solucionados']} />
            <StatCard title="Tickets Duplicados" value={stats.duplicados.toString()} description="Solicitudes duplicadas" color={statusColors['Tickets Duplicados']} />
            <StatCard title="Tickets Cancelados" value={stats.cancelados.toString()} description="Tickets que no procedieron" color={statusColors['Tickets Cancelados']} />
        </div>
    </div>
</MainLayout>

<script>
    document.addEventListener('astro:page-load', () => {
        const toggleBtn = document.getElementById('toggle-stats-btn');
        const secondaryStats = document.getElementById('secondary-stats');

        if (toggleBtn && secondaryStats) {
            toggleBtn.addEventListener('click', () => {
                const isHidden = secondaryStats.classList.contains('hidden');
                if (isHidden) {
                    secondaryStats.classList.remove('hidden');
                    secondaryStats.classList.add('grid');
                    toggleBtn.textContent = 'Ver menos';
                } else {
                    secondaryStats.classList.add('hidden');
                    secondaryStats.classList.remove('grid');
                    toggleBtn.textContent = 'Ver todo';
                }
            });
        }
    });
</script>
